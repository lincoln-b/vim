Vim things to memorize

/{match}/e == jump to the end of a match
//e == amend current search to jump to end of match

:set nowrapscan == don't wrap around when searching
/<CR>, ?<CR> == jump to next/previous match of pattern
:gn, gN == jump to next/previous match and select with character-wise Visual mode
/{abc}<C-r><C-w> == autocompletes the search field using the remainder of the current preview match

:set ignorecase == search case insensitive (side effect on autocompletion)
/\c{term} == search for {term} case insensitive. \c can be used anywhere in the pattern.
/\C{term} == search for {term} case sensitive. \C can be used anywhere in the pattern.
:set smartcase == search case sensitive only when an uppercase letter is included in the search term
/\{}, /\(\), /[] == in curly braces, only the first needs to be escaped. parens, both need escape. square brackets have special meaning by default.
\v == set search pattern to very magic
\x == hex character class, aka [0-9a-fA-F] (:help /character-classes)
\V == verbatim literal search (verynomagic). Everything but (?|/), \, depending on search delimiter
:%s//{text}/g == replace the last search term with {text}
/\<, /\> == matches beginning and ending of word
/\1 == matches the first subgroup in a regex (same for \2...\9. \0 matches whole regex)
/\v%({subterm}){term} == don't assign {subterm} to \1
g*, g# == same as * and #, but without word boundaries
/\zs, /\ze == mark the start and end of a search term

:wnext == write, go to next
:argo normal @a == run macro a in parallel on all files in the arg list

qA == append keystrokes to existing macro in register a
:{range}normal @a == run a macro "in parallel" on range

:reg {x} == show contents of register x (all if blank)
"0 == yank register (not clobbered by delete or change commands)
"= == use the expression register to evaluate an expression
"% == register with name of the current file
"# == register with name of the alternate file
". == register with the last inserted text
": == register with the last Ex command
"/ == register with the last search pattern

( == previous sentence
) == next sentence
{ == previous paragraph
} == next paragraph

:gf == go to file under cursor
:set suffixesadd+=.py == Vim will attempt to add .py to a file if it can't find it

:Tab == same as <C-i>

:jumps == view the jump list for the current window
:changes == view the change list for the current buffer
g; g, == go through the changelist of positions
gi == go back to the last place you inserted text

:cs"' == change surrounding " to '
:S == in visual mode, surround selection
:ysiw[ == surround word with square brackets
:yssb == surround whole line with parens

:`` == position before the last jump within file
:`. == position of last change
:`^ == position of last insertion
:`[ == start of last change or yank
:`] == end of last change or yank
:`< == start of last visual selection
:`> == end of last visual selection

cities = %{ London, New York }

:m{a-zA-Z} == mark current location with a letter (lowercase: buffer, uppercase: global)
:`{a-zA-Z} == snap to mark
:'{a-zA-Z} == snap to line designated by mark

:is == in sentence
:ip == in paragraph

:ge == move to the last letter of the previous word

:W == move by WORD not word
:B == move by WORD not word
:E == move by WORD not word
:gE == move by WORD not word

:g0 == 0 for display line (not real line)
:g^ == ^ " "
:g$ == $ " "

:h motion.txt == full list of all motions

:w !sudo tee % > /dev/null == save a file that you require sudo access to write

:find {filename} == look for filename in the path
:set path+={folder}/** == place all subdirectories beneath folder in the path

:SExplore == open netrw plugin in horizontal window
:VExplore == " " vertical window

:e %:h<Tab> == :e /directory/of/current/file
:%% == expand directory of current file

:copen == open the quickfix window
:vimgrep /{pattern}/g {files} == searches for vim pattern in files

:[sp]lit {filename} == same as <C-w>s :edit {filename}
:[vsp]lit {filename} == same as <C-w>v :edit {filename}
<C-w>w or <C-w><C-w>== cycle between open windows
<C-w>c or :close == Close the active window
:only == same as <C-w>o
[n]<C-w>_ == set height of active window to n rows (or use the mouse)
[n]<C-w>| == set width of active window to n cols (or use the mouse)
:lcd {path} == if path is blank, list current directory. else, set current directory
:pwd == print working directory
<C-w>T == move current window to a new tab page
:tabonly == close all tabs but this one
:tabclose == close this tab with all its open windows
:tabmove [N] == if N is 0, move current tab page to beginning. else, move current tab page to end

:args {arglist} == set the arglist to {arglist}, which can be space separated list or glob(s)
** == like * but can recurse downward into directories
`shell code` == executes `shell code` in the shell
:bnext! == still preserves unsaved changes
:set hidden == execute argdo commands without having to save the buffer

[m == prev function for Java or similar
]m == next function for Java or similar

gp == p, but leave the cursor at the end of the pasted text
gP == P, but leave the cursor at the end of the pasted text

<C-u> delete back to start of line in insert mode
<C-r>{register} paste contents of register in insert mode

ga == character code for char under cursor
<C-k>{char1}{char2} == place tab by digraph (12 -> Â½, etc) :h digraph-table

R == replace mode (tabs replace one char)
gR == virtual replace mode (tabs replace more than one char)

:[range]d[x] == delete range into register x
:[range]y[x] == yank " " "
:[line]put[x] == put contents of register x after line
:[range]t{address} == copy range to address
:[range]m{address} == move range to address
:[range]j == join range
:[range]normal{commands} == execute normal mode commands on range
:[range]s/{pattern}/{string}/[flags] == replace occurences of pattern with string on range (with flags)
:[range]g/{pattern}/[cmd] == execute ex command on range where pattern matches (range optional)
@: == repeat last ex command

gUU == capitalize whole line

r == read file into buffer (works with !<command> too)
:[range]!<command> == run shell command on the active buffer

y/search == yank text until first occurrence of search term
y?search
d/search == delete text until first occurrence of search term
d?search
c/search == change text until first occurrence of search term
c?search

:update == like write, but only when the file has been updated

:r ls == pipe ls stdout into buffer
:[range]w sh == pipe buffer (with optional range) into sh stdin
!{motion} == enter command-line mode and prepopulate [range] with the lines covered by {motion]

:argdo {something} == executes {something} on all files in the arg list
:bufdo {something} == like above, but for buffers
